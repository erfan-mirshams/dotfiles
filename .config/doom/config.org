#+title: Erfan's Doom Emacs Config
#+author: Erfan Mirshams
#+description: Erfan's personal Doom Emacs config
#+startup: showeverything
#+property: header-args:emacs-lisp :tangle ./config.el

* Lexical binding

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* Credentials
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Erfan Mirshams"
      user-mail-address "erfanmirshams@protonmail.com")
#+end_src

* Aesthetics
** Font
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Inconsolata Nerd Font Mono" :size 22)
      doom-variable-pitch-font (font-spec :family "Samim" :size 26)
      doom-big-font (font-spec :family "Inconsolata Nerd Font Mono" :size 34))
#+end_src
** Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. I personally like Oceanic Next.

#+begin_src emacs-lisp
(setq doom-theme 'modus-vivendi)
#+end_src

#+RESULTS:
: doom-one

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha 95 95))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Presentation in Org-Mode
#+begin_src emacs-lisp
(require 'org-faces)

;; Configure fill width
(setq visual-fill-column-width 50
      visual-fill-column-center-text t)


(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-start ()
  ;; Tweak font sizes
  (doom-big-font-mode 1)
  ;; Remove Line Numbers
  (display-line-numbers-mode 0)
  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")

  ;; Display inline images automatically
  (org-display-inline-images)

  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (doom-big-font-mode 0)
  ;; Add Line Numbers
  (display-line-numbers-mode 1)
  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)

  ;; Stop displaying inline images
  (org-remove-inline-images)

  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src

* Dired
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | /Move down to next line/                      | j          |
| dired-previous-line    | /Move up to previous line/                    | k          |
| dired-mark             | /Mark file at point/                          | m          |
| dired-unmark           | /Unmark file at point/                        | u          |
| dired-do-copy          | /Copy current file or marked files/           | C          |
| dired-do-rename        | /Rename current file or marked files/         | R          |
| dired-hide-details     | /Toggle detailed listings on/off/             | (          |
| dired-git-info-mode    | /Toggle git information on/off/               | )          |
| dired-create-directory | /Create new empty directory/                  | +          |
| dired-diff             | /Compare file at point with another/          | =          |
| dired-subtree-toggle   | /Toggle viewing subtree at point/             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | /Mark files using regex/     | % m        |
| dired-do-copy-regexp    | /Copy files using regex/     | % C        |
| dired-do-rename-regexp  | /Rename files using regex/   | % R        |
| dired-mark-files-regexp | /Mark all files using regex/ | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | /Change the group of marked files/ | g G        |
| dired-do-chmod  | /Change the mode of marked files/  | M          |
| dired-do-chown  | /Change the owner of marked files/ | O          |
| dired-do-rename | /Rename file or all marked files/  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
              (:map dired-mode-map
               :desc "Peep-dired image previews" "d p" #'peep-dired
               :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)

;; With dired-open plugin, you can launch external programs for certain extensions.
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                                | KEYBINDING |
|----------------------+--------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src



* Bookmarks and Buffers
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.

** Bookmarks
Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                              | KEYBINDING |
|-----------------+------------------------------------------+------------|
| list-bookmarks  | /List bookmarks/                         | SPC b L    |
| bookmark-set    | /Set bookmark/                           | SPC b m    |
| bookmark-delete | /Delete bookmark/                        | SPC b M    |
| bookmark-save   | /Save current bookmark to bookmark file/ | SPC b w    |

#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file "~/.config/doom/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-delete
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

** Buffers
Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.  /Ibuffer/ is a program that lists all of your Emacs /buffers/, allowing you to navigate between them and filter them.

| COMMAND         | DESCRIPTION            | KEYBINDING |
|-----------------+------------------------+------------|
| ibuffer         | /Launch ibuffer/       | SPC b i    |
| kill-buffer     | /Kill current buffer/  | SPC b k    |
| next-buffer     | /Goto next buffer/     | SPC b n    |
| previous-buffer | /Goto previous buffer/ | SPC b p    |
| save-buffer     | /Save current buffer/  | SPC b s    |

** Global Auto Revert
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program. To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with 'global-auto-revert-mode'.  I have also turned on Global Auto Revert on non-file buffers, which is especially useful for 'dired' buffers.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Keybindings within ibuffer mode
| COMMAND                           | DESCRIPTION                              | KEYBINDING |
|-----------------------------------+------------------------------------------+------------|
| ibuffer-mark-forward              | /Mark the buffer/                        | m          |
| ibuffer-unmark-forward            | /Unmark the buffer/                      | u          |
| ibuffer-do-kill-on-deletion-marks | /Kill the marked buffers/                | x          |
| ibuffer-filter-by-content         | /Ibuffer filter by content/              | f c        |
| ibuffer-filter-by-directory       | /Ibuffer filter by directory/            | f d        |
| ibuffer-filter-by-filename        | /Ibuffer filter by filename (full path)/ | f f        |
| ibuffer-filter-by-mode            | /Ibuffer filter by mode/                 | f m        |
| ibuffer-filter-by-name            | /Ibuffer filter by name/                 | f n        |
| ibuffer-filter-disable            | /Disable ibuffer filter/                 | f x        |
| ibuffer-do-kill-lines             | /Hide marked buffers/                    | g h        |
| ibuffer-update                    | /Restore hidden buffers/                 | g H        |

#+begin_src emacs-lisp
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src

* Elfeed
An RSS newsfeed reader for Emacs.

#+BEGIN_SRC emacs-lisp
(setq elfeed-goodies/entry-pane-size 0.5)

(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(setq elfeed-feeds (quote
                    (("https://www.reddit.com/r/linux.rss" reddit linux)
                     ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                     ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                     ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                     ("https://hackaday.com/blog/feed/" hackaday linux)
                     ("https://opensource.com/feed" opensource linux)
                     ("https://linux.softpedia.com/backend.xml" softpedia linux)
                     ("https://itsfoss.com/feed/" itsfoss linux)
                     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                     ("https://www.phoronix.com/rss.php" phoronix linux)
                     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                     ("https://www.computerworld.com/index.rss" computerworld linux)
                     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                     ("https://betanews.com/feed" betanews linux)
                     ("http://lxer.com/module/newswire/headlines.rss" lxer linux))))
#+END_SRC

* Changing Cider's pop-up config

#+begin_src emacs-lisp
(after! cider
  (set-popup-rule! "^\\*cider" :ignore t))
#+end_src

* Evaluate Elisp Expressions
Changing some keybindings from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window managers which sometimes use the control key in their keybindings.  By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these.

| COMMAND         | DESCRIPTION                                  | KEYBINDING |
|-----------------+----------------------------------------------+------------|
| eval-buffer     | /Evaluate elisp in buffer/                     | SPC e b    |
| eval-defun      | /Evaluate the defun containing or after point/ | SPC e d    |
| eval-expression | /Evaluate an elisp expression/                 | SPC e e    |
| eval-last-sexp  | /Evaluate elisp expression before point/       | SPC e l    |
| eval-region     | /Evaluate elisp in region/                     | SPC e r    |

#+Begin_src emacs-lisp
(map! :leader
      (:prefix ("e". "evaluate/ERC/EWW")
       :desc "Evaluate elisp in buffer"  "b" #'eval-buffer
       :desc "Evaluate defun"            "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region"  "r" #'eval-region))
#+END_SRC

* Web Browser
Set default web browser to firefox

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC

* Line Settings
The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                               | KEYBINDING  |
|--------------------------+-------------------------------------------+-------------|
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines))
#+END_SRC

* Mouse Support
Adding mouse support in the terminal version of Emacs.

#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

* Org-Mode
Adding personal org directory and org agenda config. Plus adding a sensible keybinding for org-babel-tangle

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle
      :desc "Org babe execute source block code" "b e" #'org-babel-execute-src-block-maybe)
(use-package! org
  :config
  (setq org-directory "~/org/")
  (setq org-agenda-files
        '("~/org/habits.org"
          "~/org/birthdays.org"
          "~/org/todo.org"))
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-refile-targets
        '(("archive.org" :maxlevel . 1)
          ("todo.org" :maxlevel . 1)))
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (advice-add 'org-agenda-quit :after 'org-save-all-org-buffers))
(defun set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
(add-hook 'org-mode-hook 'set-bidi-env)
#+end_src

** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org-Roam
#+begin_src emacs-lisp
(use-package! org-roam
  :custom
  (org-roam-directory "~/org/roam")
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
      :unnarrowed t)
     ("p" "project" entry (file "~/org/roam/templates/project-capture.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
      :unnarrowed t)))
  :config
  (org-roam-db-autosync-mode))

(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (let* ((current-files org-agenda-files)
         (new-files (my/org-roam-list-notes-by-tag "Project"))
         (all-files (delete-dups (append current-files new-files))))
    (setq org-agenda-files all-files)))
;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   nil
   :templates
   '(("p" "project" entry (file "~/org/roam/templates/project-capture.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
      :unnarrowed t)
     )))
(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))

(map! :leader
      (:prefix "n r"
       :desc "insert node immediate" "I" #'org-roam-node-insert-immediate
       :desc "find Project node" "p" #'my/org-roam-find-project
       :desc "capture Task to Project" "t" #'my/org-roam-capture-task))

#+end_src
* Winner Mode
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner redo" "<right>" #'winner-redo
       :desc "Winner undo" "<left>"  #'winner-undo))
#+END_SRC

* Enable Paredit mode in Clojure mode

#+begin_src emacs-lisp
(after! clojure-mode
  (add-hook 'clojure-mode-hook #'enable-paredit-mode))
#+end_src

# * Copilot

# #+begin_src emacs-lisp
# ;; accept completion from copilot and fallback to company
# (use-package! copilot
#   :hook
#   (prog-mode . copilot-mode)
#   (copilot-mode . (lambda ()
#                     (setq-local copilot--indent-warning-printed-p t))))

# ;; Set the keybinding for accepting Copilot completions to C-y
# (map! :map copilot-completion-map
#       "C-y" #'copilot-accept-completion
#       "C-S-y" #'copilot-accept-completion-by-word )

# #+end_src

* LSP-mode temporary fix

#+begin_src emacs-lisp
(after! lsp-mode
  ;; https://github.com/emacs-lsp/lsp-mode/issues/3577#issuecomment-1709232622
  (delete 'lsp-terraform lsp-client-packages))
#+end_src

* Kubernetes-el
 #+begin_src emacs-lisp
(use-package! kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
(use-package! kubernetes-evil
  :defer
  :after kubernetes)
(map! :leader
      (:prefix "o"
        :desc "Kubernetes" "k" 'kubernetes-overview))
 #+end_src

* Python development environment
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-pylsp-plugins-flake8-enabled t)
  (setq lsp-pylsp-plugins-pylint-enabled t)
  (setq lsp-pylsp-plugins-pycodestyle-enabled t)
  (setq lsp-pylsp-plugins-pydocstyle-enabled t)
  (setq lsp-pylsp-plugins-autopep8-enabled t))

(use-package! python
  :config
  (setq python-shell-interpreter "python3")
  (setq python-indent-guess-indent-offset-verbose nil)
  (setq python-indent-guess-indent-offset t)
  (setq python-indent-offset 4))

(use-package! python-black
  :after python
  :config
  (setq python-black-command "black"))

(map! :after python
      :map python-mode-map
      :leader
      :desc "Format buffer with Black" "=" #'python-black-buffer)

(use-package! dap-mode
  :after lsp-mode
  :config
  (require 'dap-python)
  (setq dap-python-debugger 'debugpy))

(add-hook! 'python-mode-hook #'lsp!)
#+end_src

* Go debugging environment
#+begin_src emacs-lisp
(require 'dap-dlv-go)
#+end_src

* Protobuf LSP
a beta protobuf lsp known as bufls
#+begin_src emacs-lisp
;; Ensure protobuf-mode is used for .proto files
(add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))

;; Add the buf language server
(use-package! lsp-mode
  :ensure t
  :commands lsp
  :hook (protobuf-mode . lsp)
  :config
  ;; Register buf-language-server with lsp-mode
  (add-to-list 'lsp-language-id-configuration '(protobuf-mode . "protobuf"))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "/home/erfan/.local/share/go/bin/bufls")
                    :major-modes '(protobuf-mode)
                    :server-id 'bufls)))
#+end_src

* Activate Evil Keybindings in Minibuffer
#+begin_src emacs-lisp
(setq evil-want-minibuffer t)
#+end_src

* Evil Surround
#+begin_src emacs-lisp
(use-package! evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

#+RESULTS:
: t

* Activate Octave mode for .m files
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+end_src

* Column limit
#+begin_src emacs-lisp
(setq-default fill-column 120)

(defun erfan/enable-column-indicator-for-code ()
  (when (derived-mode-p 'prog-mode 'text-mode)
    (display-fill-column-indicator-mode 1)))

(add-hook 'after-change-major-mode-hook #'erfan/enable-column-indicator-for-code)
#+end_src

* Use Projectile root directory in LSP mode
#+begin_src emacs-lisp
(setq lsp-auto-guess-root t)
(setq lsp-guess-root-without-session t)
#+end_src

* Go configuration to use golangci-lint
#+begin_src emacs-lisp
(after! go-mode
  (set-formatter! 'golangci-lint "golangci-lint run --fix")
  (setq flycheck-go-golangci-lint-executable "golangci-lint")
  (add-hook 'go-mode-hook (lambda ()
                            (setq flycheck-disabled-checkers '(go-build go-test go-errcheck go-vet))
                            (flycheck-golangci-lint-setup))))
#+end_src
